include: c/bignum.def

page: test, basic_frame
    module: c

    $(if:0)
        $call check_overflow
    $(elif:0)
        fac_8(21)
        fac_gmp(30)
    $(elif:1)
        calc_e(100)

    subcode: check_overflow
        u = 0
        printf("%u ", u)
        u-=1
        printf("- 1 = %u\n", u)

        u = 0xffffffff
        printf("%u ", u)
        u+=1
        printf("+ 1 = %u\n", u)

#----------------------------------------------- 
fncode: fac_8(n)
    u8 = 1
    $for i=1:n
        u8 *= i
        printf "%d! = %lld\n", i, u8

fncode: fac_gmp(n)
    $local integer a: 1
    $for i=1:n
        a.$mul i
        $print "$i! = -"
        a.$print
        $print

#----------------------------------------------- 
fncode: calc_e(n)
    $(set:mpfr_prec=200)
    $local mpfr ans: 1.0
    $local mpfr term: 1.0
    $for i=1:n
        term.$div i
        ans.$add term
    n_prec = term.$digits
    $print "e = -"
    ans.$print -n_prec
    $print
/*
subcode: _autoload
    $class integer
    $struct(mpz) pu8, n, int size, char sign
    $register_name(pmpz) struct mpz*
    
subcode: integer_init(var, scope, @type)
    $$(scope) struct mpz $(var)={0} 
    $set_var_attr $(var), class=integer
    $set_var_attr $(var), exit=integer_free
    
    $(set:N=10)
    $(var).pu8 = $allocate($(N), 0) $(var).pu8
    $(var).n = 1
    $(var).size = $(N)

subcode: integer_free(var)
    $if $(var).size>0
        free($(var).pu8)
        $(var).size=0

subcode: integer_add(var, i)
    f_pmpz_add(&$(var), $(i))

subcode: integer_mul(var, i)
    f_pmpz_mul(&$(var), $(i))

fncode: f_pmpz_add(pmpz, i)
    $if i==0
        return 

    $(set:sign=pmpz->sign)
    tb_sub = 0
    $if (!$(sign) && i<0) || ($(sign) && i>0)
        tb_sub = 1
    i = abs(i)

    $(set:p=pmpz->pu8)
    $(set:n=pmpz->n)
    $(set:M=0xffffffffffffffff)
    $if tb_sub
        $if $(p)[0]>=i
            $(p)[0]-=i
        $elif $(n)>1
            $call borrow
        $else
            $(sign) = !$(sign)
            $(p)[0] = i-$(p)[0]
    $else
        $if $(M)-$(p)[0]>=i
            $(p)[0]+=i
        $else
            $call carry

    subcode: borrow
        $(p)[0]-=i
        j=1
        $while j<$(n); j++
            $if $(p)[j]
                $(p)[j]--
                $call check_lead_zeros
                return
        subcode: check_lead_zeros
            $while $(p)[j]==0 && j==$(n)-1 && j>0
                $(n)--
                j--

    subcode: carry
        $(p)[0] += i
        i=1
        $while i<$(n); i++
            $(p)[i]+=1
            $if $(p)[i]>0
                return
        $call grow
        $(n)++
        $(p)[i]=1

    subcode: grow
        $(set:size=pmpz->size)
        $if $(n)+1>$(size)
            $(size)=$(n)+1
            $realloc($(size)) $(p)

fncode: f_pmpz_mul(pmpz, i)    
    $(set:sign=pmpz->sign)
    $(set:p=pmpz->pu8)
    $(set:n=pmpz->n)
    $if i==0
        $(n)=1
        $(p)[0]=0
        return

    $if i<0
        $(sign)=!$(sign)
        i=-i

    $if i==1
        return

    $(set:lo=$1 & 0xffffffff)
    u_hi = i>>32
    u_lo = $(lo:i)
    u8_carry=0
    $for j=0:$(n)
        u8_h = $(p)[j]>>32
        u8_l = $(lo:$(p)[j])

        u8_tmp = (u8_h*u_lo)+(u8_l*u_hi)

        $(p)[j] = (u8_tmp<<32)+u8_l*u_lo + u8_carry
        u8_carry = (u8_tmp>>32) + u8_h*u_hi
    $if u8_carry
        $call grow
        $(n)++
        $(p)[$(n)-1]=u8_carry

    subcode: grow
        $(set:size=pmpz->size)
        $if $(n)+1>$(size)
            $(size)=$(n)+10
            $realloc($(size)) $(p)
*/
