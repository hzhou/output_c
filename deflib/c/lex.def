subcode:: _autoload
    $struct(input_buffer) unsigned char * buffer, n_pos
    $register_name(input) struct input_buffer *
    $include ctype
    $register_name(tn_c) int

#---------------------------------------- 
subcode: local_input(s)
    $local struct input_buffer local_input_buffer
    $local input
    input=&local_input_buffer
    input->buffer=(unsigned char*)$(s)
    input->n_pos=0

subcode: local_input_n(s, n)
    $call local_input, $(s)
    $(s)[$(n)] = '\0'

subcode: set_input_s
    s = (char*)(input->buffer+input->n_pos)
#---------------------------------------- 
subcode: input_get_c(var)
    &call with_input
        $(var) = $(c)
        $(i)++

subcode: input_back_c
    &call with_input
        $call @assert, $(i)>0
        $(i)--

#---- regex captures ------------------
# ref: macros_c/translate_regex.def
subcode:: _autoload
    #-- capture buffers
    $struct(input_buffer) int s[10], int e[10]

subcode: get_ts_group(i)
    ts_group=(char*)(input->buffer+input->s[$(i)])
    $set_var_attr ts_group, strlen=input->e[$(i)]-input->s[$(i)]

subcode: with_ts_group(i)
    #- group as null-terminated string 
    $call get_ts_group, $(i)
    tn_c=input->buffer[input->e[$(i)]]
    input->buffer[input->e[$(i)]] = 0
    BLOCK
    input->buffer[input->e[$(i)]] = tn_c

subcode: get_group(i)
    $local string g$(i)
    g$(i) = input->buffer+input->s[$(i)]
    g$(i)_len = input->e[$(i)] - input->s[$(i)]

#---------------------------------------- 
fncode: match_eof
    lexical: input
    $return_type bool
    $call set_input_s
    return *s==0

#---------------------------------------- 
fncode: match_char(tn_char)
    lexical: input
    $return_type bool
    $call match_char_sub, -

fncode: match_char_i(tn_char)
    lexical: input
    $return_type bool
    $call match_char_sub, toupper

subcode: match_char_sub(cond)
    $call set_input_s
    $(if:F=-)
        $(set:c=*$1)
    $(else)
        $(set:c=$(F)($1))

    $if $(c:*s)==$(c:tn_char)
        $call ret_match
    $else
        return false

    subcode: ret_match
        input->n_pos ++
        return true

#---------------------------------------- 
fncode: match_keyword(s_key)
    lexical: input
    $return_type bool
    $call match_keyword_sub, -

fncode: match_keyword_i(s_key)    
    lexical: input
    $return_type bool
    $call match_keyword_sub, toupper

subcode: match_keyword_sub(F)
    $return_type int
    $call set_input_s
    $(set:isword=(isalnum($1)||$1=='_'))
    $(if:F=-)
        $(set:c=*$1)
    $(else)
        $(set:c=$(F)(*$1))
    $while 1
        $if $(c:s)!=$(c:s_key)
            return false
        s_key++
        s++
        $if !*s_key
            #-- check word boundary
            $if !*s 
                $call ret_match
            $elif !$(isword:s[-1])
                $call ret_match
            $elif !$(isword:*s)
                $call ret_match
            $else
                return false
    # ---------------
    subcode: ret_match
        input->n_pos = s-(char*)input->buffer
        return true

#------------------------------------------
subcode: with_input
    $(set:i=input->n_pos)
    $(set:c=input->buffer[input->n_pos])
    $(set:S=input->s)
    $(set:E=input->e)
    BLOCK

subcode: skip_spaces
    &call with_input
        $while $(c)==' '
            $(i)++

subcode: skip_line
    &call with_input
        $while $(c) && $(c)!='\n'
            $(i)++
        $if $(c)=='\n'
            $(i)++
