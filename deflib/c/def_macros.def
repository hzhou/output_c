#- line based mydef macros
#-    eventually we need support indentation blocks, but we'll do it step by step

include: c/hash.def
include: c/string.def
include: c/regex.def

subcode:: _autoload
    $global hash def_macros: char *
    
fncode: def_parse_line(s_line)
    $if s_line=~/^\s*\$\(set:(\w+)=(.*)\)/
        $regex_capture ts_key, ts_val 
        ts_str = def_parse_line(ts_val)
        def_macros{ts_key} = ts_str
        return NULL
    $else
        $local string s
        s.$clear
        $while *s_line
            $if s_line[0]=='$' && s_line[1]=='('
                ts_str = s_line+2
                &call scan_to_close, ts_str
                    *ts_str = '\0'
                    ts_temp = ts_str+1
                    ts_str = s_line+2
                    s_line = ts_temp
                    $call expand_macro, ts_str
                    continue
            s.$add *s_line
            s_line++
        $allocate(s_len+1) ts_ret
        memcpy(ts_ret, s, s_len)
        ts_ret[s_len]='\0'
        s.$exit
        return ts_ret

    subcode: scan_to_close(s)
        tn_balance=0
        $while *$(s)
            $if *$(s) == ')'
                $if tn_balance == 0
                    break
                $else
                    tn_balance--
            $elif *$(s) == '('
                tn_balance++
        $if tn_balance==0 && *$(s)==')'
            BLOCK

    subcode: expand_macro(macro)
        s.$append def_macros{$(macro)}

fncode: def_parse(s_text)
    # $call get_init_indent
    $call get_text_nextline
    $if s_text=~/^(\s*)\$\((if|for):(.*)\)/
        $regex_capture ts_indent, ts_keyword, ts_param
        $call get_block
        $if ts_keyword $eq "for"
            $call @parse_for
        $else
            $local b_switched=0
            $if def_cond(ts_param)
                $call @parse_block
                b_switched = 1
            $while ts_next=~/^(\s*)\$\((elif|elsif|elseif):(.*)\)/
                $regex_capture ts_indent, ts_key2, ts_param
                $if tn_indent!=get_indent(ts_indent)
                    goto done
                $call get_block
                $if !b_switched && def_cond(ts_param)
                    $call @parse_block
                    b_switched = 1
            $if ts_next=~/^(\s*)\$\(else\)/
                $regex_capture ts_indent
                $if tn_indent!=get_indent(ts_indent)
                    goto done
                $call get_block
                $if !b_switched
                    $call @parse_block
    done:
        s_text = ts_next

    subcode: get_block
        ts_block = ts_next
        ts_next = def_indented_block(ts_next, tn_indent)


fncode: def_indented_block(s_text, tn_indent)
    &call iter_text_lines, s_text
        $if get_indent(s_text) <= tn_indent
            ts_next = s_text
            


subcode: iter_text_lines(text)
    ts_next = $(text)
    $while ts_next
        s = ts_next
        $while *s; s++
            $if *s == '\n'
                break
        # ----
        $if *s
            ts_next = s+1
        $else
            ts_next = NULL
        *s = '\0'
        # ----
        BLOCK

        $(text) = ts_next


fncode: get_indent(s)
    i = 0
    $while *s; s++
        $if *s==' '
            i++
        $elif *s=='\t'
            i += 8-i%8 
        $else
            break
    return i

