## singly linked list, ideal for simple FIFO list
subcode:: _autoload
    $class slist

subcode: slist_init(var, scope, @type)
    $tuple_name $(type)
    $struct($(T)_node) $(type), next
    $struct($(T)) n, struct $(T)_node* head, struct $(T)_node* tail

    $$(scope) struct $(T) $(var)
    $(var).head=NULL
    $(var).tail=NULL
    $(var).n=0

    $set_var_attr $(var), class=slist

# ----------------------------------------------------
subcode: slist_shift(var)
    $if $(var).head
        $(set:p=p_$(T)_node)
        $my struct $(T)_node * $(p)
        $(p) = $(var).head
        $(var).head = $(var).head->next
        $if $(var).head == NULL
            $(var).tail = NULL
        BLOCK
        free($(p))

subcode: slist_push(var)
    $(set:p=p_$(T)_node)
    $my struct $(T)_node * $(p)
    $allocate $(p)
    $(p)->next=NULL
    $if $(var).tail == NULL
        $(var).head = $(p)
        $(var).tail = $(p)
    $else
        $(var).tail->next = $(p)
        $(var).tail = $(p)
    BLOCK

subcode: slist_unshift(var)
    $(set:p=p_$(T)_node)
    $my struct $(T)_node * $(p)
    $allocate $(p)
    $(p)->next=$(var)->head
    $if $(var)->head == NULL
        $(var)->head = $(p)
        $(var)->tail = $(p)
    $else
        $(var)->head = $(p)
    BLOCK

subcode: slist_pop(var)
    $call warn, slist: pop is not efficient, consider dlist

#---------------------------------------- 
subcode: slist_iter(var)
    $(set:p=p_$(T)_node)
    $my struct $(T)_node * $(p)
    $(p) = $(var).head
    $while $(p)
        BLOCK
        $(p) = $(p)->next

subcode: slist_head(var)
    $(set:p=p_$(T)_node)
    $my struct $(T)_node * $(p)
    $(p) = $(var).head
    $if $(p)
        BLOCK

    subcode: shift
        $(var).head = $(var).head->next
        $if $(var).head == NULL
            $(var).tail = NULL
        free($(p))

subcode: slist_tail(var)
    $(set:p=p_$(T)_node)
    $my struct $(T)_node * $(p)
    $(p) = $(var).tail
    $if $(p)
        BLOCK
