subcode:: _autoload
    $class array

#--- static array ----------------------------
#-- simply a demonstration of class support in function parameters

#---- init ------------------------------------ 
#-   $my array P[n]: int
subcode: array_init(var, scope, @type)
    $(set:N=$(var:regex:\[(.+)\]))
    $(set:var=$(var:word))
    $(if:$(type:list:n)=1)
        $$(scope) $(type) $(var)[$(N)]
    $(else)
        $tuple $(type)
        $$(scope) struct $(T) $(var)[$(N)]

    $set_var_attr $(var), class=darray, dimension=$(var)_size
    $$(scope) int $(var)_len=0
    $$(scope) int $(var)_size=$(N)

macros:
    # e.g. fncode F(array int A)
    array_param: $2* $1, int $1_len, int $1_size
    array_attrs: class=array, dimension=$(var)_size
    #      F($(array_arg:A))
    array_arg: $1, $1_len, $1_size

#---------------------------------------- 
#- P.push ("me", 30)
subcode: array_push(var, @p)
    $if $(var)_len<$(var)_size
        $(var)[$(var)_len] = $(p)
        $(var)_len++
    $else
        $call die, $(var) overflow

subcode: array_pop(var)
    $if $(var)_len<=0
        $call die, $(var) underflow
    $(var)_len--
    $yield $(var)[$(var)_len]

subcode: array_empty(var)
    $(var)_len = 0
