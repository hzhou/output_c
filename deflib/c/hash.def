include: c/strpool.def
subcode:: _autoload
    $class hash, int_hash, str_hash
    $include stdlib
    $include string

macros: 
    _hash_size: n_size, n_count, n_val_size
    _hash_key: char* p_exist, int* p_key
    strhash_member: $(_hash_size), $(_hash_key), struct strpool pool
    inthash_member: $(_hash_size), $(_hash_key)

subcode: libhash(int)
    $struct($(int)hash) $($(int)hash_member), void * p_val
    $list f_$(int)hash_resize
    $list f_$(int)hash_lookup
    $list f_$(int)hash_lookup_left
    $list f_$(int)hash_exist

#---- init ------------------------------------ 
subcode: int_hash_init(var, scope, @type)
    $(set:int=int)
    $call hash_init, $(var), $(scope), $(type)

subcode: str_hash_init(var, scope, @type)
    $(set:int=str)
    $call hash_init, $(var), $(scope), $(type)

#-------------------------------------------------------
#-- The Hash Structure: essentially it is an array: p_val
subcode: hash_init(var, scope, @type)
    # default strhash_str
    $(if:!int)
        $(set:int=str) 
    $call libhash, $(int)
    # ----------------------------------
    $(set:hash_member=$($(int)hash_member))
    $call hash_value_type
    $call init_hash_var

    $set_var_attr $(var), exit=$(int)_hash_exit
    $set_var_attr $(var), class=$(int)_hash

    # ----
    subcode: hash_value_type
        $(set:type_n=$(type:list:n))
        $(if:type=default)
            # hash without value (set)
            # $struct($(int)hash) $(hash_member)
        $(elif:type_n=1)
            # note: only simple type works, no pointers
            $(if:type=str)
                $(set:T=str)
                $(set:type=char*)
            $(elif:word:type)
                $(set:T=$(type))
            $(else)
                $tuple $(type)
            $struct($(int)hash_$(T)) $(hash_member), $(type) * p_val
        $(else)
            $tuple $(type)
            $struct($(int)hash_$(T)) $(hash_member), struct $(T) * p_val
            $(set:type=struct $(T))

        $(mexport:type,type_n,T)

    subcode: init_hash_var
        $(if:type=default)
            $$(scope) struct $(int)hash* $(var)
            $allocate $(var)
            memset($(var), 0, sizeof(*$(var)))
            $(var)->n_val_size=0
            $set_var_attr $(var), member_count=0
        $(else)
            $$(scope) struct $(int)hash_$(T)* $(var)
            $allocate $(var)
            memset($(var), 0, sizeof(*$(var)))
            $(var)->n_val_size=sizeof($(type))
            $set_var_attr $(var), member_count=$(type_n)

#---- lookup ------------------------------------ 
subcode: str_hash_set(var, key, @val)
    $call strhash_check_key, $(key)
    $temp int k
    $(k)=f_strhash_lookup_left($(var),$(_key))
    $get_var_attr $(var), member_count
    $(if:member_count>0)
        $(var)->p_val[$(k)] = $(val)

subcode: int_hash_set(var, key, @val)
    $temp int k
    $(k)=f_inthash_lookup_left($(var),$(key))
    $get_var_attr $(var), member_count
    $(if:member_count>0)
        $(var)->p_val[$(k)] = $(val)

#-- str_hash -----
subcode: str_hash_lookup(var, key)
    $call strhash_check_key, $(key)
    $(set:k=f_strhash_lookup($(var),$(_key)))
    $get_var_attr $(var), member_count
    $(if:member_count=0)
        $yield $(k)
    $(else)
        $yield $(var)->p_val[$(k)]

subcode: str_hash_lookup_left(var, key)
    $call strhash_check_key, $(key)
    $temp int k
    $(k)=f_strhash_lookup_left($(var),$(_key))
    $get_var_attr $(var), member_count
    $(if:member_count=0)
        $yield $(k)
    $(else)
        $yield $(var)->p_val[$(k)]

subcode: str_hash_exist(var, key)
    $call strhash_check_key, $(key)
    $yield f_strhash_exist($(var), $(_key))

subcode: strhash_check_key(key)
    $(if:key~^")
        $(set:_key=(unsigned char*)$(key), $(key:strlen))
    $(else)
        $get_type(keytype) $(key)
        $(if:keytype!~char\s*\*)
            $(set:_key=(unsigned char*)"$(key)", $(key:length))
        $(else)
            $get_var_attr $(key), strlen
            $(if:!strlen)
                $(set:_key=(unsigned char*)$(key), strlen($(key)))
            $(else)
                $(set:_key=(unsigned char*)$(key), $(strlen))
    $(export:_key)

#-- int_hash -----
subcode: int_hash_lookup(var, key)
    $(set:k=f_inthash_lookup($(var),$(key)))
    $get_var_attr $(var), member_count
    $(if:member_count=0)
        $yield $(k)
    $(else)
        $yield $(var)->p_val[$(k)]

subcode: int_hash_lookup_left(var, key)
    $temp int k
    $(k)=f_inthash_lookup_left($(var),$(key))
    $get_var_attr $(var), member_count
    $(if:member_count=0)
        $yield $(k)
    $(else)
        $yield $(var)->p_val[$(k)]

subcode: int_hash_exist(var, key)
    $yield f_inthash_exist($(var), $(key))

#---- resize ------------------------------------ 
subcode: str_hash_resize(var, n)
    f_strhash_resize($(var), $(n))

subcode: int_hash_resize(var, n)
    f_inthash_resize($(var), $(n))

#---------------------------------------- 
#---------------------------------------- 
macros:
    hash_resize_ratio: 5/3
    hash_resize_upper: 85/100
    hash_resize_lower: 75/100

fncode: f_strhash_resize(void * hash, n_size)
    $local struct strhash * h = hash
    $call hash_resize, str

fncode: f_inthash_resize(void * hash, n_size)
    $call hash_resize, int

subcode: hash_resize(type)
    $local struct $(type)hash * h = hash
    $if n_size==0
        $if h->n_size<=0
            n_size=10
        $else
            n_size=h->n_size*$(hash_resize_ratio)
    $elif n_size<=h->n_size
        return

    $local tp_exist = h->p_exist
    $local tp_key=h->p_key
    tn_old_size=h->n_size

    h->n_size=n_size
    # n_size++
    $(set:n=h->n_val_size)
    $allocate(n_size, 0) h->p_key, h->p_exist
    $if $(n)>0
        $local tp_val=h->p_val
        $allocate(n_size*$(n), 0) h->p_val

    $(if:type=str)
        p_strpool = &h->pool
        # By default, strpool auto resizes. 
        # Explicitly call strpool resize for performance
        # f_resize_strpool_n(&h->pool, n_str, n_avg)
    #---- copy contents -------------------
    $if tn_old_size>0
        $for i=0:tn_old_size
            $if tp_exist[i]
                $(if:type=str)
                    $call get_str_pool, p_strpool, tp_key[i]
                    k=f_strhash_lookup(h, $(s), $(strlen))
                $(else)
                    k=f_inthash_lookup(h, tp_key[i])
                h->p_exist[k]=1
                h->p_key[k]=tp_key[i]
                $if $(n)>0
                    memcpy(h->p_val+k*$(n), tp_val+i*$(n), $(n))
        free(tp_exist)
        free(tp_key)
        $if $(n)>0
            free(tp_val)

#---------------------------------------- 
fncode: f_strhash_lookup(void* hash, pc_key, int keylen): int
    $if keylen==0
        keylen=strlen((char*)pc_key)
    $call hash_lookup, str

fncode: f_inthash_lookup(void * hash, int key): int
    $call hash_lookup, int

subcode: hash_lookup(type)
    $local struct $(type)hash * h = hash
    $if h->n_size==0
        return 0
    #---------------------------------------- 
    $call get_$(type)hash_k
    #---------------------------------------- 
    $(if:type=int)
        $(set:keyeq=h->p_key[k]==key)
    $(else)
        $call get_str_pool, &h->pool, h->p_key[k]
        $(set:keyeq=$(strlen)==keylen && memcmp($(s), pc_key, keylen)==0)
    $while 1
        $if ! h->p_exist[k]
            return k
        $else
            $if $(keyeq)
                return k

        #---- basic open addressing ----
        $if k==0
            k=h->n_size-1
        $else
            k--

#---- Hashing function,  *critical*
#-- FNV-1 hash 32bit
macros: 
    fnv_prime: 16777619
    fnv_offset: 2166136261u

subcode: get_strhash_k
    $(set:M=h->n_size)
    tu_h= $(fnv_offset)
    $for i=0:keylen
        tu_h=tu_h ^ pc_key[i]
        tu_h=tu_h * $(fnv_prime)
    k = (int)(tu_h % $(M))
    # $print "get_strhash_k: %s -> $k", (char*)pc_key

subcode: get_inthash_k
    $(set:M=h->n_size)
    pc_key=(unsigned char*)&key
    tu_h= $(fnv_offset)
    $for i=0:sizeof(int)
        tu_h=tu_h ^ pc_key[i]
        tu_h=tu_h * $(fnv_prime)
    k = (int)(tu_h % $(M))

#---------------------------------------- 
#-  _left refer to lvalue in a assignment
fncode: f_strhash_lookup_left(void* hash, pc_key, int keylen)
    $if keylen==0
        keylen=strlen((char*)pc_key)
    $call hash_lookup_left, str
    k=f_strhash_lookup(h, pc_key, keylen)
    $if !h->p_exist[k]
        h->p_key[k] = f_addto_strpool(&h->pool, (char*)pc_key, keylen)
        h->p_exist[k]=1
        h->n_count++
    return k

fncode: f_inthash_lookup_left(void* hash, int key)
    $call hash_lookup_left, int
    k=f_inthash_lookup(h, key)
    $if !h->p_exist[k]
        h->p_key[k]=key
        h->p_exist[k]=1
        h->n_count++
    return k

subcode: hash_lookup_left(type)
    $local struct $(type)hash * h = hash
    $(set:limit=h->n_count+1>=h->n_size)
    $(set:upper=h->n_count >= h->n_size * $(hash_resize_upper))
    $if h->n_size==0 || $(limit) || (h->n_size>20 && $(upper))
        f_$(type)hash_resize(h, 0)

#---------------------------------------- 
fncode: f_strhash_exist(void* h, pc_key, int keylen): bool
    $if ((struct strhash*)h)->n_size==0
        return false
    k=f_strhash_lookup(h, pc_key, keylen)
    return ((struct strhash *)h)->p_exist[k];

fncode: f_inthash_exist(void* h, int key): bool
    $if ((struct inthash*)h)->n_size==0
        return false
    k=f_inthash_lookup(h, key)
    return ((struct inthash *)h)->p_exist[k];

########################################
#---- exit ------------------------------------ 
subcode: str_hash_exit(var)
    $if $(var)->n_size>0
        f_free_strpool(&$(var)->pool)
        free($(var)->p_exist)
        free($(var)->p_key)
        $if $(var)->n_val_size>0
            free($(var)->p_val)
    free($(var))

subcode: int_hash_exit(var)
    $if $(var)->n_size>0
        free($(var)->p_exist)
        free($(var)->p_key)
        $if $(var)->n_val_size>0
            free($(var)->p_val)
    free($(var))

#---------------------------------------- 
subcode: str_hash_each(var)
    $for 0:$(var)->n_size
        $if $(var)->p_exist[$(i)]
            $(set:value=$(var)->p_val[$(i)])
            $call get_str_pool, &$(var)->pool, $(var)->p_key[$(i)]
            $(set:key=$(s))
            BLOCK

subcode: int_hash_each(var)
    $for 0:$(var)->n_size
        $if $(var)->p_exist[$(i)]
            $(set:value=$(var)->p_val[$(i)])
            $(set:key=$(var)->p_key[$(i)])
            BLOCK

# ---- a hack for strpool ----
subcode: str_hash_foreach(var)
    &call each_str_pool, &$(var)->pool
        k=f_strhash_lookup($(var), $(s), $(strlen))
        $(set:value=$(var)->p_val[k])
        $(set:key=$(s))
        BLOCK

#---------------------------------------- 
subcode: hash_debug(var)
    $print hash_debug $(var):
    &call hash_iter, $(var)
        $print "%d: %s => ${$(value)}", $(i), $(key)

