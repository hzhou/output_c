#---- String Pool, similar to Knuth's TeX implementation
#---- currently being used by c/hash.def

macros:
    strpool_member: i_str, i_pool, n_str, size_t pool_size, pn_str, pc_pool

subcode:: _autoload
    $struct(strpool) $(strpool_member)
    $register_name(p_strpool) struct strpool *

    # $list f_resize_strpool_n, f_addto_strpool, f_free_strpool

#---------------------------------------- 
fncode: f_resize_strpool_n(p_strpool, n_size, n_avg)
    $(set:this=p_strpool->)
    $if n_size <= $.n_str
        return
    $.n_str = n_size
    $.pn_str = realloc($.pn_str, $.n_str * sizeof(int))

    $if n_avg==0
        $call @get_avg_str_size, n_avg
    $if n_avg*$.n_str > $.pool_size
        $.pool_size = n_avg * $.n_str
        $.pc_pool = realloc($.pc_pool, $.pool_size)
        $.pc_pool[$.pool_size-1]=0

    $if $.i_str==0
        $.pn_str[0]=0

#---------------------------------------- 
fncode: f_addto_strpool(p_strpool, s, n)
    $(set:this=p_strpool->)
    # assert $.i_str + 2 <$.n_str
    $if $.i_str + 2 >=$.n_str
        n_size = $.i_str*3/2 + 10
        f_resize_strpool_n(p_strpool, n_size, 0)

    $if n==0
        n = strlen(s)
    $if $.i_pool+n >= $.pool_size
        $call resize_str_pool_c, n
    memcpy($.pc_pool+$.i_pool, s, n)
    $.i_str++
    $.i_pool+=n
    $(if:1)
        $include assert
        assert($.i_str>0)
        assert($.i_pool>0)
    # lets zero-terminate it for convenience
    $.pc_pool[$.i_pool]='\0'
    $.i_pool+=1
    $.pn_str[$.i_str]=$.i_pool

    return $.i_str-1
    
    subcode: resize_str_pool_c(len)
        $call get_avg_str_size, tn_avg_str_size
        $.pool_size = tn_avg_str_size*$.n_str + $(len)
        $.pc_pool = realloc($.pc_pool, $.pool_size)

# -----
subcode: get_avg_str_size(var)
    $(var)=6
    $if $.i_str>0
        $(var) = $.i_pool/$.i_str + 1

#---------------------------------------- 
fncode: f_free_strpool(p_strpool)
    $(set:this=p_strpool->)

    free($.pn_str)
    free($.pc_pool)
    memset(p_strpool, 0, sizeof(struct strpool))

#----------------------------------------
subcode: empty_str_pool(var)
    $(if:var!=p_strpool)
        p_strpool=$(var)
    $(for:i_str,i_pool)
        p_strpool->$1 = 0

#-------
subcode: get_str_pool(var, i)
    $(if:var!=p_strpool)
        p_strpool=$(var)
    $(set:this=p_strpool->)

    $(export:s=($.pc_pool+$.pn_str[$(i)]))
    $(export:strlen=($.pn_str[$(i)+1]-$.pn_str[$(i)]-1))

#-------
subcode: each_str_pool(pool)
    $(if:pool!=p_strpool)
        p_strpool=$(pool)
    $(set:this=p_strpool->)

    $for 0:$.i_str
        $temp unsigned char * s
        $(s)=$.pc_pool+$.pn_str[$(i)]
        $(set:strlen=$.pn_str[$(i)+1]-$.pn_str[$(i)]-1)
        BLOCK
