include: c/string_fmt.def

subcode:: _autoload
    $class string
#---------------------------------------- 
macros:
    string_ref: $1, &$1_len, &$1_size

subcode: libstring
    $list f_string_resize
    $list f_string_append
    $list f_string_append_char
    $list f_string_append_hex
    $list f_string_append_int
    $list f_string_append_float

#---- init ------------------------------------ 
subcode: string_init(var, scope, @type)
    $include string
    $$(scope) char * $(var)=NULL
    $set_var_attr $(var), class=string, dimension=$(var)_len
    $set_var_attr $(var), exit=string_exit
    $set_var_attr $(var), strlen=$(var)_len
    $$(scope) int $(var)_len=0
    $$(scope) int $(var)_size=0
    #---- init with values -------------
    $(if:type!=default)
        $call string_add, $(var), $(type)

subcode: string_exit(var)
    $if $(var)_size>0
        free($(var))

subcode: string_empty(var)
    $(var)_len=0
    $if $(var)_size>0
        memset($(var), 0, $(var)_size)

subcode: string_clear(var)
    $call string_empty, $(var)

subcode: string_resize(var, n)
    $(set:string=$(var), &$(var)_len, &$(var)_size)
    $(var)=f_string_resize($(string), (int)$(n))

fncode: f_string_resize(s, pn_len, pn_size, n)
    $(mset:len=*pn_len, size=*pn_size)
    $if n==0
        $if $(size)>0
            free(s)
            s=NULL
            $(len)=0
            $(size)=0
    $else
        $if $(size)<n
            $(size)=n
            s=realloc(s, $(size))
            # $call @assert, s
            memset(s+$(len), 0, $(size)-$(len))
        $elif $(len)>n
            $(len)=n
            memset(s+$(len), 0, $(size)-$(len))
    return s

#---------------------------------------- 
subcode: string_add_n(var, s, n)
    $if $(var)_len + $(n) > $(var)_size
        f_string_resize($(var), &$(var)_len, &$(var)_size, $(n))
    memcpy($(var)+$(var)_len, $(s), $(n))
    $(var)_len += $(n)

#---------------------------------------- 
subcode: string_append(var, s)
    $(set:string=$(var), &$(var)_len, &$(var)_size)
    $(if:s~")
        $(var)=f_string_append($(string), (char *)$(s),$(s:strlen))
    $(elif:s~')
        $(var)=f_string_append_char($(string), $(s))
    $(else)
        $get_type(type) $(s)
        $(if:type=int or type=char or type=unsigned)
            $(var)=f_string_append_int($(string), $(s))
        $(elif:type=float)
            $(var)=f_string_append_float($(string), $(s), 7)
        $(elif:type=double)
            $(var)=f_string_append_float($(string), $(s), 15)
        $(elif:type=char *)
            $get_var_attr $(s), strlen
            $(if:!strlen)
                $(set:strlen=strlen($(s)))
            $(var)=f_string_append($(string), $(s), $(strlen))
        $(else)
            $warn string format $(s):$(type) not recognized
            $(var)=f_string_append($(string), $(s), strlen($(s)))

subcode: string_add(var, @plist)
    $(foreach:p)
        $call string_append, $(var), $(p)

subcode: string_set(var, @plist)
    $call string_clear, $(var)
    $(foreach:p)
        $call string_append, $(var), $(p)

subcode: string_addchar(var, c)
    $(set:string=$(var), &$(var)_len, &$(var)_size)
    $(var)=f_string_append_char($(string), $(c))

subcode: string_addhex(var, c)
    $(set:string=$(var), &$(var)_len, &$(var)_size)
    $(var)=f_string_append_hex($(string), $(c))

subcode: string_fmt(var, @param)
    $fmt $(param)
    $call string_resize, $(var), 100
    $(if:fmt_n>0)
        tn_ret=snprintf($(var)+$(var)_len, $(var)_size-$(var)_len-1, $(fmt))
        $(var)_len+=tn_ret
    $(else)
        $call string_add, $(var), $(fmt)

#---------------------------------------- 
subcode: string_replace(var, i0, i1, @replace)
    $local string temp_string
    $call string_resize, temp_string, $(var)_len-$(i1)
    temp_string_len=$(var)_len-$(i1)
    strncpy(temp_string, $(var)+$(i1), temp_string_len)
    $call string_resize, $(var), $(i0)
    $call string_fmt, $(var), $(replace)
    $call string_append, temp_string
    
