include: macros_output/print.def
macros:
    printf_formats: diufFeEgGxXoscpaAn

subcode:: parsecode_func_other
    $elif $func eq "fmt"
        my ($n, $fmt)=fmt_string($param)
        MyDef::compileutil::set_current_macro("fmt_n", $n)
        MyDef::compileutil::set_current_macro("fmt", $fmt)
        return
    $elif $func eq "print"
        $global $print_type=1
        add_include_direct("<stdio.h>")
        $if !$param
            push @$out, "puts(\"\");"
        $else
            $param=~s/^\s+//
            $if $param=~/^usesub:\s*(\w+)/
                $print_type=$1
            $else
                #--- fmt_string, add newline
                my ($n, $fmt)=fmt_string($param, 1)
                $if $print_type==1
                    $call get_print_to
                    $if $print_to
                        $call print_to
                    $else
                        $call print_1
                $elif $print_type
                    MyDef::compileutil::call_sub("$print_type, $fmt")
        return

    subcode: print_1
        $if $n==0 and $fmt=~/^"(.*)\\n"/
            push @$out, "puts(\"$1\");"
        $elif $fmt=~/^"%s\\n", (.*)/
            push @$out, "puts($1);"
        $else
            push @$out, "printf($fmt);"

    subcode: print_to
        $if $print_to =~/s_/
            push @$out, "sprintf($print_to, $fmt);"
        $else
            push @$out, "fprintf($print_to, $fmt);"

# -------------------------------------
subcode:: parsecode_func_other
    $elif $func eq "dump"
        debug_dump($param, undef, $out);
        return
subcode:: parsecode_func_param_other
    $elif $func eq "dump"
        debug_dump($param2, $param1, $out);
        return

fncode: debug_dump($param, $prefix, $out)
    my %colors=(red=>31,green=>32,yellow=>33,blue=>34,magenta=>35,cyan=>36)
    my @vlist=split /,\s*/, $param;
    my @a1;
    my @a2;
    $foreach my $v in @vlist
        $if $v=~/^(%.*):(.*)/
            # %8.2e:f_val
            push @a2, $2
            push @a1, "$2=$1"
        $elif $v=~/^(\d+):(%.*):(.*)/
            $for $i=0:$1
                my ($h, $t)
                $if $i==0
                    $h = "$3=["
                $if $i==$1-1
                    $t = "]"
                push @a1, "$h$2$t"
                push @a2, "$3\[$i\]"
        $elif $v=~/^(\w+):(.*)/
            # green:f_val
            my ($color,$v)=($1,$2)
            push @a2, $v;
            push @a1, "\\x1b[$colors{$color}m" . "$v=".get_var_fmt($v, 1) . "\\x1b[0m"
        $else
            my $fmt=get_var_fmt($v)
            $if !defined $fmt
                push @a1, $v
            $else
                push @a2, $v;
                push @a1, "$v=".get_var_fmt($v, 1)
    my $s_a1 = join(", ", @a1)
    my $s_a2 = join(", ", @a2)
    $if $prefix
        $if $prefix=~/^(red|green|yellow|blue|magenta|cyan)$/
            $s_a1 = "\\x1b[$colors{$1}m$s_a1\\x1b[0m"
        $else
            $s_a1 = "[$prefix] $s_a1"
    push @$out, "fprintf(stdout, \"    :$s_a1\\n\", $s_a2);";
    add_include("stdio")

