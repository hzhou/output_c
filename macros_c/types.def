subcode:: parsecode_func_param_other
    $elif $func eq "register_include"
        $if $type_include{$param1}
            $type_include{$param1}.=",$param2";
        $else
            $type_include{$param1}.="$param2";
        return

subcode:: parsecode_func_other
    $elsif $func eq "fntype"
        # Similar to type_name, but for funtion pointer types
        $if $param=~/^(.*?)\((\s*\*\s*)?(\w+)\s*\)(.*)/
            my ($pre, $star, $name, $post)=($1, $2, $3, $4)
            $fntype{$name}="$pre(*$name)$post"
        $else
            $call warn, fntype declaration error: [$param]
        return
#----------------------------------------------- 
subcode: _autoload
    $global %type_name, %type_prefix
    $global %fntype
    %type_name=(
        c=>"unsigned char",
        d=>"double",
        f=>"float",
        i=>"int",
        j=>"int",
        k=>"int",
        l=>"long",
        m=>"int",
        n=>"int",
        s=>"char*",
        buf=>"unsigned char*",
        buffer=>"unsigned char*",
        count=>"int",
        size=>"int",
    );
    %type_prefix=(
        i=>"int",
        n=>"int",
        n1=>"int8_t",
        n2=>"int16_t",
        n4=>"int32_t",
        n8=>"int64_t",
        ui=>"unsigned int",
        u=>"unsigned int",
        u1=>"uint8_t",
        u2=>"uint16_t",
        u4=>"uint32_t",
        u8=>"uint64_t",
        $(for:16,32,64)
            i$1=>"int$1_t",
            u$1=>"uint$1_t",
        c=>"unsigned char",
        uc=>"unsigned char",
        b=>"bool",
        s=>"char*",
        f=>"float",
        d=>"double",
        z=>"double complex",
        "char"=>"char",
        "size"=>"size_t",
        "time"=>"time_t",
        "file"=>"FILE *",
        "has"=>"bool",
        "is"=>"bool",
        "do"=>"bool",
    );

    $global %stock_functions
    %stock_functions=(
        "printf"=>1,
    );

    $global %lib_include, %type_include, %text_include
    %lib_include=(
        glib=>"glib",
    );

    %type_include=(
        time_t=>"time",
        int8_t=>"stdint",
        int16_t=>"stdint",
        int32_t=>"stdint",
        int64_t=>"stdint",
        uint8_t=>"stdint",
        uint16_t=>"stdint",
        uint32_t=>"stdint",
        uint64_t=>"stdint",
        "double complex"=>"complex",
    );

    # TODO: limit to function call?
    #-- deprecated, directly test in expression.def
    %text_include=(
        "printf|perror"=>"stdio",
        "malloc"=>"stdlib",
        "str(len|dup|cpy)|memcpy"=>"string",
        "\\bopen\\("=>"fcntl",
        "sin|cos|sqrt|pow"=>"math",
        "fstat"=>"sys/stat",
        "assert"=>"assert",
    );

fncode: infer_value_type($val)
    $val=~s/^[+-]//
    $if $val=~/^\((float|int|char|unsigned .*|.+\*)\)/
        return $1
    $elif $val=~/^\((\w+)\)\w/
        return $1
    $elif $val=~/^\((.*)/
        return infer_value_type($1)
    $elif $val=~/^\d+\./
        return "float"
    $elif $val=~/^\d+[eE]/
        return "float"
    $elif $val=~/^\d/
        return "int"
    $elif $val=~/^"/
        return "char*";
    $elif $val=~/^'/
        return "char";
    $elif $val=~/^(true|false)/
        $if $page->{has_bool}
            return $page->{has_bool}
        $else
            $page->{use_bool}=1
            return "bool"
    $elif $val=~/(\w+)\(.*\)/
        my $func=$functions{$1}
        $if $debug
            $print infer_value_type: function $1 [$func]
        $if $func and $func->{ret_type}
            return $func->{ret_type}
    $elif $val=~/^NULL$/
        return "void*"
    $elif $val=~/(\w+)(.*)/
        my $type=get_var_type($val, 1)
        return $type
    $elif $val=~/^\((.+)\)$/
        my @vlist=split /,\s*/, $1
        my @plist
        $foreach $v in @vlist
            push @plist, infer_value_type($v)
        my $tuple_name=declare_tuple(join(", ", @plist))
        return "struct $tuple_name"
    return undef

fncode: type_default($type)
    $if $type=~/\*$/
        return "NULL"
    $elif $type=~/float|double/
        return "0.0"
    $elif $type=~/char|signed|int/
        return "0"
    $else
        return undef

# ref: macros_output/types.def -- get_type_word
macros:
    type_prefix_chars:! tp

subcode: type_word_prefix
    $elif $c eq "p"
        $type.= "*"

fncode: get_c_type($name)
    my $type = get_type_name($name)
    $if !$type and $name=~/t?(p+)_(.*)/
        my $count = length($1)
        return "void".('*'x$count)

    $call @check_type, $type
    # ----
    $type=~s/\s+(\*+)$/\1/
    # --------------------------
    $while $name=~/\[.*?\]/g
        $type=pointer_type($type);
    # --
    $if $debug eq "type"
        print "    get_c_type:   $name: $type\n";
    return $type;

fncode: pointer_type($t)
    $t=~s/\s*\*\s*$//;
    return $t;

subcode:: check_type(type)
    $if $(type) eq "bool"
        $page->{use_bool}=1
#----------------------------------------
subcode:: parsecode_func_param_other
    $elif $func eq "register_fmt"
        $foreach $t in split /,\s*/, $param1
            $if $param2=~/^\[(.*)\]$/
                my @t = split /,\s*/, $1
                $var_fmts{$t}=\@t
            $else
                $var_fmts{$t}=$param2
        return 

subcode: _autoload
    $global %var_fmts
    %var_fmts = (
        float=>'%g',
        double=>'%g',
        "unsigned"=>'%d',
        "unsigned char"=>'%d',
        char=>'%c',
        bool=>'%d',
    )

fncode: get_var_fmt($v, $warn)
    my $type=get_var_type($v, 1)
    $if !$type or $type eq "void"
        $type=get_c_type($v);

    $if $var_fmts{$type}
        $call return_fmts, $var_fmts{$type}
    $elif $type=~/^char\s*\*/
        return "\%s";
    $elsif $type=~/\*\s*$/
        return "\%p";
    $elif $type =~ /^(u?)int64_t/
        add_include("<inttypes.h>")
        $if $1
            return '%" PRIu64 "'
        $else
            return '%" PRId64 "'
    $elif $type=~/(int|long|u?int\d+_t)\s*$/
        return "\%d";
    $elif $var_fmts{default}
        $call return_fmts $var_fmts{default}
    $else
        $if $warn
            $call warn, get_var_fmt: unhandled $v - $type, default to \%d
        return '%d'

    subcode: return_fmts(fmt)
        my $t = $(fmt)
        $if ref($t) eq "ARRAY"
            my @fmt = @$t
            $foreach @fmt
                s/\$1/$v/g
            return @fmt
        $else
            return $t

