subcode:: parsecode_func_other
    $elif $func eq "tuple"
        declare_tuple($param)
        return
    $elif $func eq "tuple_name"
        get_T_name($param)
        return
    $elif $func eq "struct"
        return "CALLBACK struct $param"

subcode:: parsecode_func_param_other
    $elif $func eq "struct"
        declare_struct($param1, $param2)
        return
    $elif $func eq "union"
        declare_struct($param1, $param2, 1)
        return

subcode:: parsecode_callback
    $case $func eq "struct"
        $foreach $l in @$codelist
            $if $l=~/^NOOP/
                $l=''
            $elif $l=~/[:;]/
                $l = join ', ', split_var_line($l)
        my $t = join(', ', @$codelist)
        declare_struct($param, $t)
        return

#-----------------------------------------
fncode: get_T_name($param)
    $global %tuple_hash
    my $name
    $if $tuple_hash{$param}
        $name = $tuple_hash{$param}
    $else
        $name=MyDef::utils::uniq_name("T", \%structs)
        $tuple_hash{$param}=$name

    MyDef::compileutil::set_current_macro("T", $name)
    return $name

#-----------------------------------------
#-- $tuple declares anonymous struct with a1, a2, ...
#--   ref: deflib/c/darray.def
fncode: declare_tuple($param) 
    my $name=get_T_name($param)

    my $s_list=[]
    my $s_hash={}
    $structs{$name}={list=>$s_list, hash=>$s_hash, type=>"struct"}
    push @struct_list, $name
    my @plist=split /,\s*/, $param;
    my $i=0
    $foreach $p in @plist
        $i++
        my $m_name="a$i"
        push @$s_list, $m_name
        $s_hash->{$m_name}=$p
    return $name

fncode: declare_union($name, $param)
    declare_struct($name, $param, 1)

#-----------------------------------------
fncode: declare_struct($name, $param, $is_union)
    # $print declare_struct: $name - $param - $is_union
    my ($s_list, $s_hash)
    my ($s_init, $s_exit)
    my $st
    $if $name and $structs{$name}
        $st = $structs{$name}
        $s_list=$st->{list}
        $s_hash=$st->{hash}
    $else
        $s_list=[]
        $s_hash={}
        $st={list=>$s_list,hash=>$s_hash}
        $if $name
            $structs{$name}= $st
            push @struct_list, $name
    my $T="struct"
    $if $is_union
        $T="union"
    $st->{type}=$T
    $if $name
        $type_prefix{"st$name"}="struct $name"
    # struct(name) darray P: type(s)
    $call @check_var_special, "struct($name)"
    $call declare_struct_elements
    return $st
    # -----------------------------
    subcode: declare_struct_elements
        my @plist=MyDef::utils::proper_split($param)
        # my @plist=split_var_line($param)
        my $i=0
        my $anon_union
        $foreach $p in @plist
            my ($m_name, $type, $needfree);
            $if $p=~/^@/
                $needfree=1
                $p=$';
            $call @filter_special
            $i++
            $call @check_init
            $call parse_m_name_type

            $if $type eq "bool"
                $page->{use_bool}=1
            #---------------------------------------- 
            $if !$s_hash->{$m_name}
                push @$s_list, $m_name
                $s_hash->{$m_name}=$type
            $if $needfree
                $st->{"needfree-$m_name"}=1

        subcode: filter_special
            $elif $p=~/^\s*$/
                next
            $elif $p=~/^-(\w+)=>(.*)/
                $st->{$1}=$2
                next
            $elif $p=~/class (\w+)/
                # inheretance
                my $o=$structs{$1}
                $if $o
                    my $h=$o->{hash}
                    my $l=$o->{list}
                    $foreach $m in @$l
                        $if !$s_hash->{$m}
                            $s_hash->{$m}=$h->{$m}
                            push @$s_list, $m
                next
        subcode: check_init
            # -- init -------
            $if $p=~/(.*?)(\S+)\s*=\s*(.*)/
                $p="$1$2";
                push @$s_init, "$2=$3";
        subcode: parse_m_name_type
            $if $p=~/^(\w+)\s*:\s*(.+)/
                ($m_name, $type)=($1,$2)
            $elif $p=~/^(.*?)\{(.*)\}\s*$/ -> $t1, $t2
                # nesed struct/union
                $type = "nest"
                my $is_union=0
                $if $t1=~/^(union\s*)(.*)/
                    $t1 = $2
                    $is_union=1
                $if $t1=~/^(\w+)/
                    $m_name = $1
                $else
                    $m_name = $i
                $st->{"nest-$m_name"}=declare_struct(undef, $t2, $is_union)
            $elif $basic_types{$p} or $p=~/\*$/
                # anonymous type
                $m_name="a$i"
                $type=$p
            $elif $p=~/^\w+$/
                # simple word
                $m_name=$p;
                $if $p=~/^(next|prev|left|right)$/
                    $type="struct $name *"
                $elif $fntype{$p}
                    $type="function";
                $else
                    $type=get_c_type($p);
            $else
                my $v = parse_var($p)
                $m_name=$v->{name}
                $type=$v->{type}
    # ------------------------------

#- structure_autolist: 
#-     ref list_functions.def, variables.def
subcode: check_structure_autolist
    $if $structure_autolist{$1}
        my $s_list=[]
        my $s_hash={}
        my $st ={list=>$s_list, hash=>$s_hash}
        $structs{$1}=$st
        push @struct_list, $1
        $if ref($structure_autolist{$1}) eq "ARRAY"
            $foreach $t in @{$structure_autolist{$1}}
                $if $t=~/^\s*(.*\S)\s+(\w+);/
                    push @$s_list, $2
                    $s_hash->{$2}=$1
        $else
            $s_hash->{opaque}=1

fncode: get_struct_element($stype, $name)
    $if $stype=~/(\w+)(.*)/
        $if $typedef_hash{$1}
            $stype=$typedef_hash{$1}.$2
    $if $stype=~/struct\s+(\w+)/
        my $st=$structs{$1};
        my $s_hash=$st->{hash}
        $if $s_hash->{$name}
            return {name=>$name, type=>$s_hash->{$name}}
        $else
            $foreach $k in keys(%$s_hash)
                $if $k=~/^$name\[/
                    return {name=>$name, type=>$s_hash->{$k}.'*'}
        $call @debug
    subcode: debug
        $if $debug eq "type"
            $while my ($k, $v)=each %$s_hash
                print "  :|$k: $v\n"
            print "$name not defined in struct $1\n"

fncode: get_struct_element_type($stype, $name)
    my $var=get_struct_element($stype, $name)
    $if $var and $var->{type}
        return $var->{type}
    return "void"

#---------------------------------------- 
subcode: _autoload
    $global %basic_types
    %basic_types=(
        "int"=>1,
        "char"=>1,
        "unsigned"=>1,
        "unsigned char"=>1,
        "long"=>1,
        "float"=>1,
        "double"=>1,
    );
