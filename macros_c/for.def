include: macros_output/for.def

subcode:: parsecode_func_other
    $elif $func eq "for"
        $call parsecode_for_support, c_style_protect
        return
    $elif $func eq "foreach"
        $if $param=~/(\w+)\s+in\s+(\w+)/
            my ($t, $v)=($1, $2)
            $call foreach_array
        $elif $param=~/^(\S+)\s*$/
            my ($t, $v)=("t", $1)
            $call foreach_array

#---------------------------------------- 
subcode: for_i0_i1_step
    my $T="int"
    $call for_i0_i1_step_default, loop_var
    $param = "$T $param"

    subcode: loop_var
        $if !$var
            $var = "i"
            $var=MyDef::utils::uniq_name("i", \%protected_var)
            MyDef::compileutil::set_current_macro("i", $var)
        $elif $var=~/^(.*\S)\s+(\w+)$/
            $T= "$1 "
            $var = $2
        protect_var($var)

subcode: for_c_style_protect
    $call push_single_block, "for ($param) {", "}"
    $(if:type!=asis)
        push @src, "PARSE:\$unprotect_var $var"

#---------------------------------------- 
subcode: foreach_array
    my $var=find_var($v)
    my $dim

    $if defined $var->{dimension}
        $dim=$var->{dimension}

    # print "foreach_array, $v, $var->{name}, $dim ...\n"

    $if defined $dim
        $call foreach_single, $dim
   
    subcode: foreach_single(range)
        my $type=pointer_type($var->{type})
        my $var=temp_add_var("i", $type_name{i})
        my $i = $var->{name}
        protect_var($i)
        MyDef::compileutil::set_current_macro("t", "$v\[$i\]")
        my $end="PARSE:\$unprotect_var $i"
        &call return_newblock, for
            $call push_single_block, "for($i=0;$i<$(range);$i++){", "}"
            push @src, $end

