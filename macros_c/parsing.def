include: macros_c/allocate.def
include: macros_c/for.def
include: macros_c/expression.def
include: macros_c/print.def
include: macros_c/assignment.def

#---------------------------------------- 
subcode:: parsecode_special
    $case $l=~/^NOOP POST_MAIN/
        $call parsecode_post
        return

subcode: parsecode_func_param
    $if $func eq "dump"
        debug_dump($param2, $param1, $out);
        return
    $elsif $func eq "define"
        add_define($param1, $param2)
        return
    $elsif $func eq "enum"
        $if !$enums{$param1}
            push @enum_list, $param1
            $enums{$param1}=$param2
        $else
            $enums{$param1}.=", $param2"
        return
    $call @parsecode_func_param_other

subcode: parsecode_func
    ## All the functions
    $if $func eq "block"
        return single_block("$param\{", "}", "block")
    $elif $func =~/^except/
        return single_block("$except\{", "}", "else")
    $elif $func =~ /^(while|switch)$/
        my $name=$1;
        $if $name eq "while" and $param=~/^(.*?);\s*(.*?);?\s*$/
            &call return_newblock, while
                push @src, "while($1){"
                push @src, "INDENT"
                push @src, "BLOCK"
                push @src, "$2;"
                push @src, "DEDENT"
                push @src, "}"
        $else
            $param=parse_condition($param)
            return single_block("$name($param){", "}")
    $elsif $func =~/^do(while)?/
        $if $1
            $param=parse_condition($param)
            return single_block("do{", "}while($param);")
        $else
            return single_block("while(1){", "break;}")
    #---------------------------------------- 
    $elsif $func eq "include"
        add_include($param)
        return
    $elsif $func eq "declare"
        $call @do_declare, $param
        return
    $elsif $func eq "define"
        push @$out, "#define $param";
        return
    $elsif $func eq "enum"
        $global $anonymous_count=0
        my $name="ANONYMOUS-$anonymous_count"
        $anonymous_count++
        push @enum_list, $name;
        $enums{$name}=$param;
        return
    $elsif $func eq "uselib"
        my @flist=split /,\s*/, $param;
        $foreach $f in @flist
            $if $f=~/^\w+$/
                add_object("lib$f")
                $if $lib_include{$f}
                    add_include($lib_include{$f})
            $else
                add_object($f)
        return
    $elsif $func eq "typedef"
        add_typedef($param)
        return
    $elsif $func eq "dump"
        debug_dump($param, undef, $out);
        return
    $call @parsecode_func_other

subcode: parsecode_other
    $if !$l or $l=~/^\s*$/
        # NOOP
    $elif $l=~/^\s*#/
        # Preprocessor
    $elif $l=~/^\s*(for|while|if|else if)\b/
        # NOOP
    $elif $l=~/[:\(\{;,]\s*$/
        # NOOP
    $elif $l=~/^\s*}\s*$/
        # NOOP
    $else
        $call check_functioncall
        $l=check_expression($l)
        $if !$l
            return 
        $else
            $l.=";"

    # ---------------------- 
    subcode: check_functioncall
        $case $l=~/^(\w+)\s+(.*)$/
            # print "check_functioncall: $1\n"
            $if $functions{$1} or $stock_functions{$1}
                my $fn=$1;
                my $t=$2;
                $t=~s/;\s*$//;
                $t=~s/\s+$//;
                $l="$fn($t)";

#---------------------------------------- 
#--- called from output.def ------------
include: macros_c/translate_regex.def

fncode: parse_condition($param)
    $if $param=~/^\$(\w+)\s+(.*)/
        my ($func, $param)=($1, $2)
        $call parse_condition_check_plugin
    $elif $param=~/^\/(.*)\/(i?)\s*$/
        return translate_regex($1, $2)
    $elif $param=~/^(.*)\s*:([^'"]+):\s*(.*)/
        # c=='*' :||: a,b,c
        my ($pat, $sep, $t)=($1, $2, $3)
        my $plist = MyDef::utils::for_list_expand($pat, $t)
        return join($sep, @$plist)
    return check_expression($param, "condition")


#---------------------------------------- 
#- include: macros_c/sumcode.def
include: macros_output/sumcode.def

subcode:: parsecode_func_other
    $case $func eq "sumcode" or $func eq "loop" or $func eq "sum"
        $call parsecode_sum_support, c

subcode:: parsecode_func_param_other
    $case $(join:$func eq "*": or :sumcode, loop, sum, for)
        my $dimstr=$param1
        my $param=$param2
        $call parsecode_sum_simple, c
