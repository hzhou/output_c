subcode:: parsecode_func_param_other
    $elif $func eq "get_pointer_type"
        my $type=pointer_type(get_var_type($param2));
        MyDef::compileutil::set_current_macro($param1, $type)
        return

subcode:: parsecode_func_other
    $elif $func eq "auto" or $func eq "Auto"
        # hacks for C++
        $if $param=~/^(\w+)\s*=\s*(.*)/
            my ($name, $val) = ($1, $2)
            $val=~s/\s*;\s*$//
            my $type=get_c_type($name)
            $if $type and $type ne "void"
                $if $func eq "auto"
                    push @$out, "$type $name = $val;"
                $else
                    push @$out, "$type $name = dynamic_cast<$type>($val);"
            $elif $val=~/(\w+)(\.|->)(find|begin|end)\b/
                my $t = get_c_type($1)
                $t=~s/^const\s+//
                push @$out, $t."::const_iterator $name = $val;"
            $else
                $print "$func: type for $name unknown\n"
        $elif $param=~/^(\w+);?/
            my $name=$1
            my $type=get_c_type($name)
            push @$out, "$type $name;"
        return

subcode:: parsecode_func_other
    $elif $func=~/^(static|extern)$/
        $call check_var_special, $func
        &call each_param_v
            $if $func eq "static"
                my $name=global_add_var($v)
                $global_hash->{$name}->{attr}="static"
            $elif $func eq "extern"
                my $name=global_add_symbol($v)
                my $decl=var_declare($global_hash->{$name}, 1)
                $call do_declare, "extern $decl"
        return

#---- pseudo class support ---
subcode:: parsecode_func_other
    $elif $func eq "class"
        $global %class_names, %type_class
        my @tlist=split /,\s*/, $param
        $foreach $t in @tlist
            $if $t=~/^\s*(.*\S)\s*->\s*(\w+)/
                $class_names{$2}=1
                $type_class{$1}=$2
            $else
                $class_names{$t}=1
        return

subcode: check_var_special(scope)
    $if $param=~/^(\w+)\s+(.*)$/
        $if $class_names{$1}
            my $scope=$(scope)
            my ($class, $param)=($1, $2)
            my $initname=$class."_init"
            $if $debug eq "type"
                $print "$red{$class} - $param"
            $if $param=~/^(\w+)\s*$/
                $if $(hascode:$initname)
                    MyDef::compileutil::call_sub("$initname, $1, $scope, default")
                    return
            $elif $param=~/^(\w+)\s*:\s*(.*)/
                $if $(hascode:$initname)
                    MyDef::compileutil::call_sub("$initname, $1, $scope, $2")
                    return

#---------------------------------------- 
#- Scopes:   
#-     global/external, function, block
#- At each scope level:
#-     _list: list of, names
#-     _hash: hash to hash
#-----------------------------------------------------------------
fncode: auto_add_var($name, $type, $value)
    my $var
    $if $name=~/^(\w+)$/
        $var=find_var($1)
        $if !$var
            $if $debug eq "type"
                $call warn, auto_add_var: $name - $type - $value
            func_add_var($name, $type, $value)
    $else
        # do not add array variables, let C compiler complain
        return

#---------------------------------------- 
#---- array, let's restrict to one dimensional arrays
#-        multi-layer is a comprehension hazard
#-        deal with it in mydef macros
fncode: parse_var($name, $type, $value)
    my $type_given=$type
    my ($init, $array, $constructor);
    my @attrs
    my $explicit_type;
    # omit ;
    $name=~s/;\s*$//
    # NOTE: space sensitive!
    $if !$type
        $if $name=~/^\s*(\S[^=]*)\s+([^= \t].*)/
            ($type, $name)=($1, $2)
            $explicit_type=1
            $call check_pointer_type_name
    $if $type
        $call check_type_attributes
    $if $name=~/(\S+?)\s*=\s*(.*)/
        ($name, $init)=($1, $2)
        $if $debug eq "type"
            print "    parse_var: name $1, init $2\n"
        $call value_from_file
        $if !$value
            $value=$init
    $if $name=~/(\w+)\[(.*)\]/
        $name=$1;
        $array=$2;
    $elif $name=~/(\w+)\((.*)\)/
        $name=$1;
        $constructor=$2;
    $if !$type
        $call infer_type

    #----------------------
    $if $type=~/struct\s+(\w+)/ and !$structs{$1}
        $call @check_structure_autolist

    #---- put it together ----
    my $var={}
    $var->{name}=$name
    $var->{type}=$type
    $var->{init}=$init
    $if @attrs
        $var->{attr}=join(" ", @attrs)
    $if defined $array
        $var->{array}=$array
        $var->{dimension}=$array
        #- $local pn_test[10]: int* --> same
        $if $type!~/\*$/
            #- $local n_test[10]:  int  --> int *
            $var->{type}.=" *"
        $elif $type_given or $explicit_type
            #- $local int * P[10]: int * --> int **
            $var->{type}.="*"
    $elif defined $constructor
        $var->{constructor}=$constructor
    $call @debug
    $if $type_class{$type}
        $var->{class}=$type_class{$type}
    return $var

    # --------------------
    subcode: check_type_attributes
        $while $type=~/^\s*(extern|static|const|register)\s*(.*)/
            push @attrs, $1
            $type=$2

    subcode: infer_type
        $if $fntype{$name}
            $type="function"
        $else
            $type=get_c_type($name)
            $if $type and $type eq "void"
                undef $type
        $if defined $value
            my $val_type=infer_value_type($value)
            $if $val_type
                $if !$type
                    $type= $val_type
                $elif $val_type =~/\*$/ and $type eq "void*"
                    $type = $val_type
                $else
                    $val_type=~s/\s+(\*+)$/\1/
                    $if $type ne $val_type
                        $call warn_conflict
        # --
        subcode: warn_conflict
            $if $val_type eq "void"
                NOOP
            $elif $val_type=~/float|double/ and $type=~/float|double/
                NOOP
            $elif $val_type=~/char/ and $type=~/unsigned|int/
                NOOP
            $elif $val_type eq "int" and $type=~/(double|float|bool|int|char)/
                NOOP
            $elif $val_type eq "bool" and $type=~/boolean/
                NOOP
            $elif $val_type eq "void*" and $type=~/\*$/
                NOOP
            $else
                $call warn, var $name set to type $type, different from value type $val_type
    # --
    subcode: debug
        $if $debug eq "type"
            $call warn, add_var: type:[$type] - $name ($array) - $init ($value)


fncode: name_type_authortative($name, $type)
    $if !$type or $type eq "void"
        return 0
    $if $type_name{$name}
        return 0
    $if $name=~/^(t_?)*(p_?)*([a-zA-Z][a-zA-Z0-9]*)\_/
        my $prefix=$3
        $if $debug eq "type"
            print "name_with_prefix: $prefix - $type_prefix{$prefix}\n"
        $if $prefix =~ /^[fn]$/
            # f_var, n_var: basic type prefixes are authoritative
            return 1
    return 0

#---------------------------------------- 
subcode: check_pointer_type_name
    $if $name=~/^(\*+)(.+)/
        $type.=" $1"
        $name=$2
    #- c++ specific, is it worthwhile?
    $elif $name=~/^(&)(.+)/
        $type.=" $1"
        $name=$2

#---------------------------------------- 
fncode: var_declare($var, $need_semi)
    my $t
    $if $var->{type} eq "function"
        $t =  $fntype{$var->{name}};
    $else
        my $name=$var->{name}
        my $type=$var->{type}
        $if defined $var->{array}
            $t=pointer_type($type)." $name"."[$var->{array}]"
        $elif defined $var->{constructor}
            $t=pointer_type($type)." $name"."($var->{constructor})"
        $else
            $t="$type $name"

        $if defined $var->{init}
            $t.=" = $var->{init}"
        $if defined $var->{attr}
            $t = $var->{attr} . " $t"

    $if $need_semi
        $t .= ';'
    return  $t

#---------------------------------------- 
fncode: get_var_type($name, $nowarn)
    $if $name=~/^(\w+)(.*)/
        my $tail=$2
        my $base_type=get_var_type_direct($1)
        $base_type=~s/\s*&$//
        #---- undef if not found -----
        return get_sub_type($base_type, $tail, $nowarn)
    $else
        return "void";

fncode: get_sub_type($type0, $tail, $nowarn)
    $if !$type0
        return "void"

    $if $tail=~/^(\.|->)(\w+)(.*)/
        $tail=$3;
        my $type=get_struct_element_type($type0, $2)
        return get_sub_type($type, $tail, $nowarn)
    $elif $tail=~/^\[.*?\](.*)/
        my $new_tail=$1
        $if $type0=~/\*$/
            return get_sub_type(pointer_type($type0), $new_tail, $nowarn)
        $else
            $if !$nowarn
                $call warn, error in dereferencing pointer type $type0 ($tail)
            return "void"
    $else
        return $type0

#-----------------------
# ref: macros_output/variables.def -- find_var_x
subcode: find_var_element
    $if $name=~/(.*)(\.|->)(\w+)$/
        my ($vdot, $mem)=("$1$2", $3)
        my $t = get_var_type($1)
        my $var= get_struct_element($t, $mem)
        $var->{struct}=$vdot
        return $var
    $elif $name=~/^\w+$/
        my $scope=MyDef::compileutil::get_current_macro("scope")
        $if $scope=~/struct\((\w+)\)/
            return get_struct_element("struct $1", $name)
        $else
            return find_var($name)

#-###############################################
subcode:: c_init
    $global @extern_binary
    @extern_binary=()

subcode: value_from_file
    $if $init=~/^=\[binary_from_file:(\S+)\]/
        $global_hash->{"_$name"}="extern char _$name"
        push @$global_list, "_$name"
        $init="=&_$name"
        push @extern_binary, "$name:$1"

subcode: process_extern_binary
    my $ofile=$page->{outdir}."/extern.o"
    my $otime=-M $ofile
    my $need_update=0
    my @externS;
    push @externS, "    .section .rodata"
    $foreach $t in @extern_binary
        $if $t=~/(.*):(.*)/
            my ($name, $fname)=($1,$2)
            push @externS, "    .global _$name"
            #push @externS, "    .type   $name, \"object\""
            push @externS, "    .align  4"
            push @externS, "_$name:"
            push @externS, "    .incbin \"$fname\""
            $if -M $fname > $otime
                $need_update=1
    $if $need_update
        print "  ---> $ofile\n"
        open Out, ">$page->{outdir}/extern.s"
        print Out join("\n", @externS), "\n";
        close Out

        my $cmd= "as -o $ofile"
        open PIPE, "|$cmd" or die "Can't run $cmd\n"
        print PIPE join("\n", @externS), "\n"
        close PIPE
    $if -f $ofile
        add_object("extern.o")

