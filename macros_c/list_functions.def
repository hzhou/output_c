include: macros_output/functions.def
subcode:: c_init
    $call function_init

#---- auto_declare -----------------------------
# relying on utils to export external functions
#     need work out solutions on structure etc.
#     deprecate autoload_h, "auto" is a monster, explicit rules!
subcode: load_autodecl(inc)
    $global %structure_autolist
    my $lines=MyDef::parseutil::get_lines("$(inc)")
    my $struct_lines
    $foreach $l in @$lines
        $if $l=~/^F\s+(\S.+)\s+(\w+)\((.*)\)/
            my ($name, $type, $param)=($2, $1, $3)
            $functions{$name}={declare=>"$type $name($param)", ret_type=>$type}
            $function_autolist{$name}="declare"
        # ------------------------
        $elif $l=~/^S\s+(.*)/
            # S mystruct --> an opaque struct
            my @tlist=split /,\s*/, $1
            $foreach $t in @tlist
                $structure_autolist{$t}=1
        # ------------------------
        $elif $l=~/^struct (\w+)\{/
            # struct(name){
            #     struct_line
            #     ...
            # }
            $struct_lines=[]
            $structure_autolist{$1}=$struct_lines
        $elif $l=~/^}/
            undef $struct_lines
        $elif $struct_lines
            push @$struct_lines, $l

#------------------------------------
# ##############################
# ref: macros_output/functions.def -- function_list_all
subcode: parsecode_post
    #---- NOOP POST_MAIN: called at end of parse or 
    #-      end of each parse group as in output_xs.def

    #- NOTE: it won't work for functions added in exit calls, which are processed at the begining of dumpout at process_function

    $(set:lambda=$MyDef::compileutil::named_blocks{"lambda-$1"})
    $while my $f=shift @list_function_list
        # $print parse_function_list_item $f ...
        $if $(lambda:$f)
            push @$out, "DUMP_STUB lambda-$f"
            $function_autolist{$f}="static"
        $elif $functions{$f} && $functions{$f}->{autodecl}
            NOOP
        $elif $function_autolist{$f} eq "declare"
            push @function_declare_list, $f
        $else
            $call list_function, $f

#---------------------------------------- 
fncode: inject_function($name, $params, $source)
    my $t_code={'type'=>"fn", name=>$name, 'source'=>$source, params=>$params}
    $MyDef::def->{codes}->{$name}=$t_code

    $if !$list_function_hash{$name}
        $list_function_hash{$name}=1
        push @list_function_list, $name
    $else
        $list_function_hash{$name}++


